{"name":"Polybench/GPU","tagline":"","body":"### Introduction\r\n\r\nPolyBench is a collection of benchmarks containing static control parts. The purpose is to uniformize the execution and monitoring of kernels, typically used in past and current publications. PolyBench features include:\r\n\r\n* A single file, tunable at compile-time, used for the kernel instrumentation. It performs extra operations such as cache flushing before the kernel execution, and can set real-time scheduling to prevent OS interference.\r\n* Non-null data initialization, and live-out data dump.\r\n* Syntactic constructs to prevent any dead code elimination on the kernel.\r\n* Parametric loop bounds in the kernels, for general-purpose implementation.\r\n* Clear kernel marking, using `#pragma scop` and `#pragma endscop` delimiters.\r\n\r\n### Modifications to Polybench\r\n\r\nWe extended the initial CPU benchmarks to include the following target languages:\r\n* CUDA\r\n* OpenCL\r\n* HMPP\r\n* OpenACC\r\n* OpenMP\r\n\r\n### Benchmarks Included \r\n\r\nBenchmark | Description\r\n--- | ---\r\n2mm | 2 Matrix Multiplications (D=A.B; E=C.D)\r\n3mm | 3 Matrix Multiplications (E=A.B; F=C.D; G=E.F)\r\nadi | Alternating Direction Implicit solver\r\natax | Matrix Transpose and Vector Multiplication\r\nbicg | BiCG Sub Kernel of BiCGStab Linear Solver\r\ncholesky | Cholesky Decomposition\r\ncorrelation | Correlation Computation\r\ncovariance | Covariance Computation\r\ndoitgen | Multiresolution analysis kernel (MADNESS)\r\ndurbin | Toeplitz system solver\r\ndynprog | Dynamic programming (2D)\r\nfdtd-2d | 2-D Finite Different Time Domain Kernel\r\nfdtd-apml | FDTD using Anisotropic Perfectly Matched Layer\r\ngauss-filter | Gaussian Filter\r\ngemm | Matrix-multiply C=alpha.A.B+beta.C\r\ngemver | Vector Multiplication and Matrix Addition\r\ngesummv | Scalar, Vector and Matrix Multiplication\r\ngramschmidt | Gram-Schmidt decomposition\r\njacobi-1D | 1-D Jacobi stencil computation\r\njacobi-2D | 2-D Jacobi stencil computation\r\nlu | LU decomposition\r\nludcmp | LU decomposition\r\nmvt | Matrix Vector Product and Transpose\r\nreg-detect | 2-D Image processing\r\nseidel | 2-D Seidel stencil computation\r\nsymm | Symmetric matrix-multiply\r\nsyr2k | Symmetric rank-2k operations\r\nsyrk | Symmetric rank-k operations\r\ntrisolv | Triangular solver\r\ntrmm | Triangular matrix-multiply\r\n\r\n### Project Updates\r\n\r\nAll updates will be committed to the github repository accessible at the top of this page\r\n\r\n### Project Members\r\n\r\nScott Grauer-Gray (@sgrauerg)\r\nRobert Searles (@rsearles35)\r\nWilliam Killian (@willkill07)\r\nJohn Cavazos (@cavazos)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}